<?php

declare(strict_types=1);

use Phinx\Migration\AbstractMigration;

final class AttrTables extends AbstractMigration {
    public function up(): void {
        $this->query("
            create table applicant_role (
                id_applicant_role int not null primary key generated by default as identity,
                id_user int not null,
                name text not null,
                description text not null,
                created timestamptz not null default current_timestamp,
                modified timestamptz not null default current_timestamp,
                is_published boolean default false
            )
        ");
        $this->query("
            create trigger applicant_role_modified
                before update on applicant_role
                    for each row
                        execute function modified_now()
        ");
        $this->query("
            create unique index ar_n_uidx on applicant_role (name)
        ");
        $this->query("
            insert into applicant_role
                (id_applicant_role, id_user, name, description, created, modified, is_published)
            select \"ID\", \"UserID\", \"Title\", \"Description\", \"Created\", \"Modified\",
                case when \"Published\" = 0 then false else true end
            from relay.applicant_role
            order by \"ID\"
        ");

        $this->query("
            create table artist_attr (
                id_artist_attr int not null primary key generated by default as identity,
                name text not null,
                description text not null
            )
        ");
        $this->query("create unique index attra_n_uidx on artist_attr (name)");
        $this->query("
            insert into artist_attr
            select artist_attr_id, name, description
            from relay.artist_attr
            order by artist_attr_id
        ");

        $this->query("
            create table artist_role (
                id_artist_role int not null primary key generated by default as identity,
                sequence int not null,
                slug text not null,
                name text not null,
                title text not null,
                collection text
            )
        ");
        $this->query("create unique index ar_s_uidx on artist_role (slug)");
        $this->query("
            insert into artist_role
                  (id_artist_role, sequence, slug, name, title, collection)
            select artist_role_id, sequence, slug, name, title, collection
            from relay.artist_role
            order by artist_role_id
        ");

        $this->query("
            create table bonus_item (
                id_bonus_item int not null primary key generated by default as identity,
                sequence int not null,
                price int not null,
                amount int default null,
                userlevel_min int not null,
                userlevel_free int not null default 999999,
                label text not null,
                name text not null
            )
        ");
        $this->query("create unique index bi_n_uidx on bonus_item (name)");
        $this->query("
            insert into bonus_item (
                id_bonus_item, sequence, price, amount, userlevel_min, userlevel_free, label, name
            )
            select \"ID\", sequence, \"Price\", \"Amount\", \"MinClass\", \"FreeClass\", \"Label\", \"Title\"
            from relay.bonus_item
            order by \"ID\"
        ");

        $this->query("
            create table category (
                id_category int not null primary key generated by default as identity,
                name text not null,
                upload category_upload_t not null default 'simple',
                is_system boolean default false,
                is_grouped boolean default false
            )
        ");
        $this->query("create unique index cat_n_uidx on category (name)");
        $this->query("
            insert into category
                  (id_category, name, upload, is_system, is_grouped)
            select category_id, name, upload,
                case when is_system = 0 then false else true end,
                case when is_grouped = 0 then false else true end
            from relay.category
            order by category_id
        ");

        $this->query("
            create table collage_attr (
                id_collage_attr int not null primary key generated by default as identity,
                name text not null,
                description text not null
            )
        ");
        $this->query("create unique index attrc_n_uidx on collage_attr (name)");
        $this->query("
            insert into collage_attr (id_collage_attr, name, description)
            select \"ID\", \"Name\", \"Description\"
            from relay.collage_attr
            order by \"ID\"
        ");

        $this->query("
            create table do_not_upload (
                id_do_not_upload int not null primary key generated by default as identity,
                id_user int not null,
                sequence int not null,
                name text not null,
                description text not null,
                created timestamptz not null default current_timestamp
            )
        ");
        $this->query("create unique index dnu_n_uidx on do_not_upload (name)");
        $this->query("
            insert into do_not_upload
                (id_do_not_upload, id_user, sequence, name, description, created)
            select \"ID\", \"UserID\", \"Sequence\", \"Name\", \"Comment\", \"Time\"
            from relay.do_not_upload
            order by \"ID\"
        ");

        $this->query("
            create table torrent_group_attr (
                id_torrent_group_attr int not null primary key generated by default as identity,
                name text not null,
                description text not null
            )
        ");
        $this->query("create unique index attrtg_n_uidx on torrent_group_attr (name)");
        $this->query("
            insert into torrent_group_attr (id_torrent_group_attr, name, description)
            select \"ID\", \"Name\", \"Description\"
            from relay.torrent_group_attr
            order by \"ID\"
        ");

        $this->query("
            create table torrent_attr (
                id_torrent_attr int not null primary key generated by default as identity,
                name text not null,
                description text not null
            )
        ");
        $this->query("create unique index attrt_n_uidx on torrent_attr (name)");
        $this->query("
            insert into torrent_attr (id_torrent_attr, name, description)
            select \"ID\", \"Name\", \"Description\"
            from relay.torrent_attr
            order by \"ID\"
        ");

        $this->query("
            create table release_type (
                id_release_type int primary key generated by default as identity,
                name text not null
            )
        ");
        $this->query('
            insert into release_type (id_release_type, name)
            select "ID", "Name" from relay.release_type
            order by "ID"
        ');
        $this->query("
        create unique index rt_n_uidx on release_type (name)");
    }

    public function down(): void {
        $this->query("
            drop table if exists
                applicant_role,
                artist_attr,
                artist_role,
                bonus_item,
                category,
                collage_attr,
                do_not_upload,
                torrent_group_attr,
                torrent_attr,
                release_type
        ");
    }
}
